{"version":3,"sources":["components/Header/index.js","data.js","App.js","serviceWorker.js","index.js"],"names":["Header","text","className","columns","name","label","options","filter","sort","data","firstName","lastName","role","department","filterType","print","download","App","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6TAWeA,MARf,YAAyB,IAARC,EAAO,EAAPA,KACf,OACE,yBAAKC,UAAU,cACb,4BAAKD,KCNEE,EAAU,CACtB,CACCC,KAAM,YACNC,MAAO,aACPC,QAAS,CACRC,QAAQ,EACRC,MAAM,IAGR,CACCJ,KAAM,WACNC,MAAO,YACPC,QAAS,CACRC,QAAQ,EACRC,MAAM,IAGR,CACCJ,KAAM,OACNC,MAAO,OACPC,QAAS,CACRC,QAAQ,EACRC,MAAM,IAGR,CACCJ,KAAM,aACNC,MAAO,aACPC,QAAS,CACRC,QAAQ,EACRC,MAAM,KAKIC,EAAO,CAClB,CAAEC,UAAW,OAAUC,SAAU,MAAYC,KAAM,MAAyBC,WAAY,cACxF,CAAEH,UAAW,MAAUC,SAAU,MAAYC,KAAM,kBAAyBC,WAAY,cACxF,CAAEH,UAAW,QAAUC,SAAU,QAAYC,KAAM,kBAAyBC,WAAY,eACxF,CAAEH,UAAW,OAAUC,SAAU,QAAYC,KAAM,kBAAyBC,WAAY,eACxF,CAAEH,UAAW,OAAUC,SAAU,SAAYC,KAAM,aAAyBC,WAAY,SACxF,CAAEH,UAAW,OAAUC,SAAU,SAAYC,KAAM,oBAAyBC,WAAY,aACxF,CAAEH,UAAW,OAAUC,SAAU,UAAYC,KAAM,uBAAyBC,WAAY,cAG7EP,EAAU,CACrBQ,WAAY,WACZC,OAAO,EACPC,UAAU,GCvBGC,MAff,WACE,OACE,6BACE,kBAAC,EAAD,CAAQhB,KAAK,YACb,kBAAC,IAAD,CACEiB,MAAM,qBACNhB,UAAU,gBACVO,KAAMA,EACNN,QAASA,EACTG,QAASA,MCPGa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2d81cd1d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Header({text}) {\n  return (\n    <div className=\"pageHeader\">\n      <h1>{text}</h1>\n    </div>\n  );\n}\n\nexport default Header;\n","export const columns = [\n {\n  name: \"firstName\",\n  label: \"First Name\",\n  options: {\n   filter: false,\n   sort: true,\n  }\n },\n {\n  name: \"lastName\",\n  label: \"Last Name\",\n  options: {\n   filter: false,\n   sort: true,\n  }\n },\n {\n  name: \"role\",\n  label: \"Role\",\n  options: {\n   filter: true,\n   sort: true,\n  }\n },\n {\n  name: \"department\",\n  label: \"Department\",\n  options: {\n   filter: true,\n   sort: true,\n  }\n },\n];\n\nexport const data = [\n  { firstName: \"John\",   lastName: \"Doe\",      role: \"CEO\",                   department: \"Management\" }, \n  { firstName: \"Joe\",    lastName: \"Rop\",      role: \"Product Manager\",       department: \"Management\" }, \n  { firstName: \"Blarf\",  lastName: \"Ranlp\",    role: \"Senior Engineer\",       department: \"Engineering\" }, \n  { firstName: \"Jort\",   lastName: \"Plawn\",    role: \"Junior Engineer\",       department: \"Engineering\" }, \n  { firstName: \"Wort\",   lastName: \"Plorry\",   role: \"Sales Lead\",            department: \"Sales\" }, \n  { firstName: \"Wrop\",   lastName: \"Furtin\",   role: \"Creative Director\",     department: \"Marketing\" },\n  { firstName: \"Tril\",   lastName: \"Yurktun\",  role: \"Social Media Manager\",  department: \"Marketing\" }\n];\n\nexport const options = {\n  filterType: 'checkbox',\n  print: false,\n  download: false\n};\n\n","//react\nimport React from \"react\";\n//css\nimport \"./App.css\";\n//components\nimport MUIDataTable from \"mui-datatables\";\nimport Header from \"./components/Header\";\n//data\nimport { columns, data, options } from \"./data.js\";\n\nfunction App() {\n  return (\n    <div>\n      <Header text=\"Initech\"/>\n      <MUIDataTable\n        title=\"Employee Directory\"\n        className=\"employeeTable\"\n        data={data}\n        columns={columns}\n        options={options}\n      />\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}